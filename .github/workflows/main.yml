name: Build & Zip (.NET)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write


env:
  DOTNET_VERSION: "9.0.x"                 # Change if you target a different SDK
  SOLUTION_PATH: "CrescentSynchronos.sln"          # ← set to your .sln
  PROJECT_PATH: "MareSynchronos/CrescentSynchronos.csproj"  # <- << SET THIS to your .csproj path
  CONFIGURATION: "Release"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive           # ← important if API/shared is a submodule
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Dalamud runtime for the SDK check
      - name: Fetch Dalamud runtime for CI
        run: |
          set -e
          wget -q https://goatcorp.github.io/dalamud-distrib/latest.zip
          mkdir -p dalamud
          unzip -q latest.zip -d dalamud
          echo "DALAMUD_HOME=$PWD/dalamud" >> $GITHUB_ENV

      - name: Restore (solution)
        run: dotnet restore "${{ env.SOLUTION_PATH }}"

      - name: Pack plugin
        run: dotnet build "${{ env.SOLUTION_PATH }}" -c "${{ env.CONFIGURATION }}" -p:GenerateDalamudZip=true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            **/bin/x64/Release/CrescentSynchronos/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       

      - name: Determine tag and version
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          # Prefer manual input, then release tag, then ref name
          TAG="${{ github.event.inputs.manual_tag || github.event.release.tag_name || github.ref_name }}"
          echo "raw tag: $TAG"
          CLEAN="${TAG#v}"
          VERSION_WITH_ZERO="${CLEAN}.0"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "clean=$CLEAN" >> "$GITHUB_OUTPUT"
          echo "version_with_zero=$VERSION_WITH_ZERO" >> "$GITHUB_OUTPUT"

      - name: Update external repo file via Contents API
        uses: actions/github-script@v7
        env:
          TARGET_OWNER: obscure-crescent
          TARGET_REPO: repo
          TARGET_BRANCH: main
          TARGET_PATH: plogons.json
          NEW_TAG: ${{ steps.vars.outputs.tag }}
          NEW_VERSION: ${{ steps.vars.outputs.version_with_zero }}
          PAT: ${{ secrets.TARGET_REPO_PAT }}
        with:
          github-token: ${{ env.PAT }}
          script: |
            const owner = process.env.TARGET_OWNER;
            const repo = process.env.TARGET_REPO;
            const path = process.env.TARGET_PATH;
            const branch = process.env.TARGET_BRANCH;
            const tag = process.env.NEW_TAG;
            const version = process.env.NEW_VERSION;

            async function getFile() {
              try {
                const { data } = await github.repos.getContent({ owner, repo, path, ref: branch });
                if (Array.isArray(data)) throw new Error('Target path is a directory, expected file.');
                return data;
              } catch (e) {
                if (e.status === 404) throw new Error(`File not found at ${owner}/${repo}/${path}@${branch}`);
                throw e;
              }
            }

            const data = await getFile();
            const content = Buffer.from(data.content, data.encoding).toString('utf8');

            // Modify as text to tolerate trailing commas, etc.
            let updated = content;

            // 1) AssemblyVersion: "x.y.z.*" -> version (e.g., 1.11.1.0)
            updated = updated.replace(/("AssemblyVersion"\s*:\s*")([^"]*)(")/, `$1${version}$3`);

            // 2) DownloadLinkInstall/Update -> use new tag in URL
            //    Replace the tag segment in .../releases/download/<tag>/latest.zip
            updated = updated.replace(/(https:\/\/github\.com\/obscure-crescent\/crescent_client\/releases\/download\/)\S+(\/latest\.zip)/g, `$1${tag}$2`);

            if (updated === content) {
              core.info('No textual changes detected. (Already up to date?)');
            } else {
              await github.repos.createOrUpdateFileContents({
                owner,
                repo,
                path,
                message: `chore: bump AssemblyVersion to ${version} and links to ${tag}`,
                content: Buffer.from(updated, 'utf8').toString('base64'),
                sha: data.sha,
                branch
              });
              core.info(`Updated ${owner}/${repo}/${path} on branch ${branch}.`);
            }
